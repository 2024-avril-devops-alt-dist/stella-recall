// This is your Prisma schema file
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  email               String    @unique
  password            String
  phoneNotification   Boolean   @default(false)
  phoneNumber         Int?
  bookings            Booking[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("users")
}

model Passenger {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  age          Int
  bookingIds   String[]  @db.ObjectId
  bookings     Booking[] @relation(fields: [bookingIds], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("passengers")
}

model Booking {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  bookingStatus Boolean     @default(false)
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.ObjectId
  flight        Flight      @relation(fields: [flightId], references: [id])
  flightId      String      @db.ObjectId
  passengerIds  String[]    @db.ObjectId
  passengers    Passenger[] @relation(fields: [passengerIds], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("bookings")
}

model Flight {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  bookingOpenStatus   Boolean         @default(true)
  flightStatus        Boolean         @default(true)
  departureSpaceport  String         @db.ObjectId
  arrivalSpaceport    String         @db.ObjectId
  departureDateTime   DateTime
  arrivalDateTime     DateTime
  bookingStatus       String        // Enum in MongoDB can be represented as String
  airlineCompany      AirlineCompany @relation(fields: [airlineCompanyId], references: [id])
  airlineCompanyId    String         @db.ObjectId
  bookings           Booking[]
  stopoverIds        String[]       @db.ObjectId
  stopovers          Stopover[]     @relation(fields: [stopoverIds], references: [id])
  departureLocation  Location       @relation("DepartureLocation", fields: [departureSpaceport], references: [id])
  arrivalLocation    Location       @relation("ArrivalLocation", fields: [arrivalSpaceport], references: [id])
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@map("flights")
}

model Stopover {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  arrivalDate     DateTime
  departureDate   DateTime
  location        Location  @relation(fields: [locationId], references: [id])
  locationId      String    @db.ObjectId
  flightIds       String[]  @db.ObjectId
  flights         Flight[]  @relation(fields: [flightIds], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("stopovers")
}

model Location {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  city             String
  country          String
  airportName      String?
  servedLocations  String?
  departures       Flight[]   @relation("DepartureLocation")
  arrivals         Flight[]   @relation("ArrivalLocation")
  stopovers        Stopover[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@map("locations")
}

model AirlineCompany {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  companyName   String
  flights       Flight[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("airline_companies")
}